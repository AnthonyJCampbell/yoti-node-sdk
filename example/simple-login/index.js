'use strict'

// call the packages we need
require('dotenv').config()
const express    = require('express')
const https      = require('https')
const bodyParser = require('body-parser')
const fs         = require('fs')
const ejs        = require('ejs')
const app        = express()

const YotiClient = require('yoti')

const port = process.env.PORT || 9443

var configDictionary = {};

// The application ID and .pem file are generated by https://www.yoti.com/dashboard when you create your app
// The client SDK ID is generated by https://www.yoti.com/dashboard when you publish your app
configDictionary.APPLICATION_ID = process.env.YOTI_APPLICATION_ID // Your Yoti Application ID
configDictionary.CLIENT_SDK_ID = process.env.YOTI_CLIENT_SDK_ID  // Your Yoti Client SDK ID
configDictionary.PEM_PATH = process.env.YOTI_KEY_FILE_PATH  // Path to your Yoti Application ID

for (var key in configDictionary) {
	ThrowErrorIfConfigValueMissing(key, configDictionary[key]);
}

const PEM_KEY = fs.readFileSync(configDictionary.PEM_PATH)

var yotiClient = new YotiClient(configDictionary.CLIENT_SDK_ID, PEM_KEY)

app.set('view engine', 'ejs')
app.use(bodyParser.urlencoded({ extended: true }))
app.use(bodyParser.json())
app.use('/static', express.static('static'))

var router = express.Router()

router.get('/', function(req, res) {
  res.render('pages/index', {
		yotiApplicationId: configDictionary.APPLICATION_ID
	})
})

router.get('/profile', function(req, res) {
	let token = req.query.token
	if(!token) {
		res.render('pages/error', {
			error : "No token has been provided."
		})
		return
	}

	let promise = yotiClient.getActivityDetails(token)
	promise.then((activityDetails) => {
		var profile = activityDetails.getUserProfile()
		var selfie = profile.selfie;			

		if (typeof selfie != 'undefined') {
			saveImage(selfie)
				.then(function() {
					res.render('pages/profile', {
						userId  : activityDetails.getUserId(),
						profile : profile
					})
				})
		}
	}).catch((err) => {
		console.error(err)
		res.render('pages/error', {
			error : err
		})
		return
	})

})

app.use('/', router)

// START THE SERVER
// =============================================================================
https.createServer({
  key: fs.readFileSync(__dirname + '/keys/server-key.pem'),
  cert: fs.readFileSync(__dirname + '/keys/server-cert.pem')
}, app).listen(port);

console.log('Server running on https://localhost:' + port)

function ThrowErrorIfConfigValueMissing(configKey, configValue) {
    if (typeof configValue == 'undefined')
        throw new Error('no config value retrieved for ' + configKey)
}

function saveImage(selfieDate) {
	return new Promise(function(res, rej) {
		try {
			var base64Data = selfieDate.replace(/^data:image\/jpeg;base64,/, "");
			
			require("fs").writeFileSync(
				"static\\YotiSelfie.jpeg",
				base64Data,
				'base64')	
			res()		  
		} catch (error) {
			rej(error)
		}
	})
}